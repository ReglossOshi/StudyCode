Rest API

API(Application Programming Interface)
응용 프로그램에서 사용할 수 있도록 다른 응용 프로그램을
제어할 수 있게 만든 인터페이스를 뜻함


내 프로그램에서 다른 프로그램을 사용/제어하고 싶어
근데 다른 프로그램내에서 자신을 제어할 수 있는 인터페이스를 제공

아 인터페이스 명세서를 통해서 어떤 기능들을 사용할 수 있구나
확인하여 습득하여 사용

API를 사용하면 내부 구현 로직을 알지 못해도 정의되어 있는
기능을 쉽게 사용할 수 있음

인터페이스란 어떤 장치간 정보를 교환하기 위한 수단이나
방법을 의미한다

대표적 인터페이스는 키보드, 마우스, 터치패드등등
이러한 것처럼 소프트웨어로 동작하는 인터페이스이다.

Rest Representational State Transfer
자원상태전달

자원의 이름으로 구분하여 해당 자원의 상태를 교환하는 것
자원=데이터
자원의 상태=데이터의 상태(시간,구성등등)

서버와 클라이언트의 통신 방식 중 하나인 아키텍처

HTTP URI를 통해 자원을 명시하고
HTTP Method를 통해 자원을 교환하는 것
(GET,POST,PUT,DELETE)
(C,R,U,D)

REST 특징

서버-클라이언트 구조
자원이 있는 쪽이 서버
요청하는 쪽이 클라이언트
클라와 서버는 독립적으로 분리되어 있어야 한다.
(하드웨어적으로 소프트웨어적으로 독립)
자원을 공유하는 교집합이 없어야한다.
서버에 별도의 DB, 클라이언트에 별도의 DB를 둬서
침범하지 않게 만듬
서버와 클라이언트의 역할을 분명하게 구분할 수 있다.


무상태성 Stateless
요청 간에 클라이언트 정보가 서버에 저장 안됨
서버는 각각의 요청을 완전히 별개의 것으로 인식하고 처리
덕분에 구현이 쉽고 서버의 부담을 덜수 있다.


캐시 가능 Cacheable
HTTP 프로토콜을 그대로 사용하기 때문에 HTTP의 특징인
캐싱 기능을 적용
대량의 요청을 효율적으로 처리하기 위해 캐시를 사용
(별도의 로직을 돌리지 않고 똑같은 요청일 경우 동일한 결과를 반환)
HTTP를 사용하기 때문에 기본 인프라를 사용 가능
캐시 기능을 이요해 같은 URI에 대한 반복된 요청을 효율적으로 처리 가능



계층화(Layered System)
클라이언트는 서버의 구성과 상관 없이 REST API 서버로 요청
서버는 다중 계층으로 구성될 수 있음(로드밸런싱, 보안 요소, 캐시)
클라이언트는 대상 서버와 직접 통신하는지 아니면 중간 서버와 통신하는지
알 수 없다.
따라서 클라이언트와 서버의 통신 사이에 보안이나 로드 밸런싱등을 위한
중간 계층을 추가할 수 있다.


Code on Demand(선택)
요청을 받으면 서버에서 클라이언트로 코드 또는 스크립트(로직)
을 전달하여 클라이언트 기능 확장

인터페이스 일관성(Uniform Interface)
정보가 표준 형식으로 전송되기 위해 구성 요소간
통합 인터페이스를 제공
HTTP 프로토콜을 따르는 모든 플랫폼에서 사용 가능
HTTP를 사용할 수 있는 환경이라면 플랫폼에 상관없이 사용할 수 있으며
리소스의 타입에 상관 없이 같은 형태의 요청으로 처리된다.

자체적인 표현 구조(Self-Descriptiveness)
JSON,XML 등을 이용하는 메세지 구조로
해당 메세지가 무엇을, 어떤 행위를 의미하는지 직관적으로
이해할 수 있습니다.

REST 장점
별도의 인프라 구축 필요 없음(HTTP사용)
서버와 클라이언트의 역할을 명확하게 분리
HTTP 표준 프로토콜을 사용하는 모든 플랫폼에서 호환 가능
메세지가 자체적으로 무엇을 의미하는지 표현하고 있어 쉽다.
여러 서비스 설계에서 생길 수 있는 문제 최소화

단점
표준이 존재하지 않음
REST의 특징을 따르지 않으면서 REST API로 설계되는 이상한 API가
만들어 질 수 있어 관리가 어려움

HTTP Method의 한계
단순 CRUD만 가능

RDBMS와 맞지 않음
JSON, XML등의 형태로 사용하는데 RDBMS와는 맞지 않는 형태이다.
======================================
REST API 란?
REST 아키텍처의 조건을 준수하는 어플리케이션 프로그래밍
인터페이스를 뜻함

최근 많은 API가 REST API로 제공되고 있다
(정부, 업체)
일반적으로 REST 아키텍처를 구현하는 웹 서비스를 RESTful하다고
표현한다.

REST API 특징
REST 기반으로 시스템을 분산하여 확장성과 재사용성을 높임
HTTP 표준을 따르고 있어 여러 프로그래밍 언어로 구현할 수 있음

설계 규칙
1.웹 기반의 REST API를 설계할 경우에는 URI를 통해 자원을 표현해야함
localhost:8080/name/홍길동
Resource:name
Resource id:홍길동

2.자원에 대한 조작은 HTTP Method(CRUD)를 통해 표현해야 한다.
URI에 행위가 들어가면 안됨
HEADER를 통해 CRUD를 표현하여 동작 요청해야함

3.메세지를 통한 리소스 조작
HEADER를 통해 content-type을 지정하여 데이터를 전달
대표적 형식으로 HTML,XML,JSON,TEXT가 있음

4.URI에는 소문자
5.Resource의 이름이나 URI가 길어질 경우 하이픈(-)을 통해 가독성 증가
6.언더바(_)는 사용안함
7.파일 확장자를 표현하지 않음.html .jsp등등
